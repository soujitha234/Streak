/*You are given two 0-indexed arrays, nums1 and nums2, consisting of non-negative integers. There exists another array, nums3, which contains the bitwise XOR of all pairings of integers between nums1 and 
nums2 (every integer in nums1 is paired with every integer in nums2 exactly once).
Return the bitwise XOR of all integers in nums3.
*/

/*
possible scenarios:
1. even, even:	
	[1,2],[3,4] = 1^3^1^4^2^3^2^4 
	every number is present even number of times, so [a^a=0]
	so, even ^ even is 0
2. odd, even:
	[1,2],[3,4,5] = 1^3^1^4^1^5^2^3^2^4^2^5
	even nunbers cancel to become 0, remaining [a^a^a=a]
	so, even ^ odd = even
3. odd, odd:
	perform each array internally and then perform the answers of 2 xors
*/

class Solution {
	public int xorAllNums(int[] nums1, int[] nums2) {
		int c = 0;
		if (nums1.length % 2 == 0 && nums2.length % 2 == 0) {
			return 0;
		} else if (nums1.length % 2 == 1 && nums2.length % 2 == 1) {
			for (int i : nums1) {
				c = i ^ c;
			}
			for (int i : nums2) {
				c = i ^ c;
			}
		} else {
			if (nums1.length % 2 == 0) {
				for (int i : nums1) {
					c = i ^ c;
				}
			} else {
				for (int i : nums2) {
					c = i ^ c;
				}
			}
		}
		return c;
	}
}
