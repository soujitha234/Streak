/*A 0-indexed array derived with length n is derived by computing the bitwise XOR (⊕) of adjacent values in a binary array original of length n.

Specifically, for each index i in the range [0, n - 1]:

If i = n - 1, then derived[i] = original[i] ⊕ original[0].
Otherwise, derived[i] = original[i] ⊕ original[i + 1].
Given an array derived, your task is to determine whether there exists a valid binary array original that could have formed derived.

Return true if such an array exists or false otherwise.

A binary array is an array containing only 0's and 1's
 

Example 1:

Input: derived = [1,1,0]
Output: true
Explanation: A valid original array that gives derived is [0,1,0].
derived[0] = original[0] ⊕ original[1] = 0 ⊕ 1 = 1 
derived[1] = original[1] ⊕ original[2] = 1 ⊕ 0 = 1
derived[2] = original[2] ⊕ original[0] = 0 ⊕ 0 = 0*/

/*
derived = [d1, d2, d3] and original = [x1, x2, x3]

each of the derived element "formula" are these:
d1 = x1 ^ x2, d2 = x2 ^ x3, d3 = x3 ^ x1

if we XOR all of derived numbers, then it can be rewritten as:
from d1 ^ d2 ^ d3 to x1 ^ x2 ^ x2 ^ x3 ^ x3 ^ x1. All of original elements appear in pairs thus cancelling out each other which give the result as 0, thus d1 ^ d2 ^ d3 = 0
*/

class Solution {
    public boolean doesValidArrayExist(int[] derived) {
        int c = 0;
        for(int i: derived){
            c = c^i;
        }
        if(c==0){
            return true;
        }
        return false;
    }
}
