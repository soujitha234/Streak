/*You are given two 0-indexed integer permutations A and B of length n.

A prefix common array of A and B is an array C such that C[i] is equal to the count of numbers that are present at or before the index i in both A and B.

Return the prefix common array of A and B.

A sequence of n integers is called a permutation if it contains all integers from 1 to n exactly once.

 

Example 1:

Input: A = [1,3,2,4], B = [3,1,2,4]
Output: [0,2,3,4]
Explanation: At i = 0: no number is common, so C[0] = 0.
At i = 1: 1 and 3 are common in A and B, so C[1] = 2.
At i = 2: 1, 2, and 3 are common in A and B, so C[2] = 3.
At i = 3: 1, 2, 3, and 4 are common in A and B, so C[3] = 4.
Example 2:

Input: A = [2,3,1], B = [3,1,2]
Output: [0,1,3]
Explanation: At i = 0: no number is common, so C[0] = 0.
At i = 1: only 3 is common in A and B, so C[1] = 1.
At i = 2: 1, 2, and 3 are common in A and B, so C[2] = 3.
 */

 /*Functions learned:
Arrays.copyOfRange(arrName, startIndex, exclusiveEndIndex)
*/

import java.util.*;
class Solution {
    public int[] findThePrefixCommonArray(int[] A, int[] B) {
        int[] ans = new int[A.length];
        for(int i=0;i<A.length;i++){
            int[] a1 = Arrays.copyOfRange(A, 0, i+1);
            int[] a2 = Arrays.copyOfRange(B, 0, i+1);
            Set<Integer> s1 = Arrays.stream(a1).boxed().collect(Collectors.toSet());
            Set<Integer> s2 = Arrays.stream(a2).boxed().collect(Collectors.toSet());
            s1.addAll(s2);
            ans[i] = ((i+1)*2)-s1.size();
        }
        return ans;
    }
}

import java.util.*;
class Solution {
    public int[] findThePrefixCommonArray(int[] A, int[] B) {
        int[] ans = new int[A.length];
        Set<Integer> s1 = new HashSet<>();
        int c=0;
        for(int i=0;i<A.length;i++){
            if(s1.contains(A[i])){
                c++;
            }else{
                s1.add(A[i]);
            }
            if(s1.contains(B[i])){
                c++;
            }else{
                s1.add(B[i]);
            }
            ans[i] = c;
        }
        return ans;
    }
}
